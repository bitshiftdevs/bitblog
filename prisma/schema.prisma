// apps/api/prisma/schema.prisma
generator client {
  provider     = "prisma-client"
  output       = "../lib/gen/prisma"
  runtime      = "workerd"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  passwordHash     String?
  avatarUrl        String?
  bio              String?
  isActive         Boolean   @default(true)
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?
  lastSeenAt       DateTime?
  emailVerified    Boolean   @default(false)
  emailVerifiedAt  DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  roles           UserRole[]
  authoredPosts   Post[]         @relation("AuthorPosts")
  coAuthoredPosts Post[]         @relation("CoAuthoredPosts")
  uploadedMedia   Media[]
  postRevisions   PostRevision[]
  sessions        Session[]
  auditLogs       AuditLog[]
  invitedBy       User?          @relation("UserInvites", fields: [invitedById], references: [id])
  invitedById     String?
  invitedUsers    User[]         @relation("UserInvites")
  comments        Comment[]

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions Json // { "posts": ["read","write","publish"], "users": ["manage"], "media": ["upload","delete"] }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Post {
  id            String         @id @default(uuid())
  slug          String         @unique
  title         String
  excerpt       String?
  content       Json // TipTap JSON content
  status        PostStatus     @default(DRAFT)
  visibility    PostVisibility @default(PUBLIC)
  featuredImage String?
  canonicalUrl  String?
  readingTime   Int? // in minutes
  viewCount     Int            @default(0)
  publishedAt   DateTime?
  scheduledAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // SEO fields
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?

  // Relations
  author     User           @relation("AuthorPosts", fields: [authorId], references: [id])
  authorId   String
  coAuthors  User[]         @relation("CoAuthoredPosts")
  tags       PostTag[]
  categories PostCategory[]
  revisions  PostRevision[]
  comments   Comment[]

  @@index([status, publishedAt])
  @@index([slug])
  @@index([authorId])
  @@map("posts")
}

model PostRevision {
  id        String   @id @default(uuid())
  postId    String
  content   Json
  title     String
  excerpt   String?
  note      String?
  version   Int
  createdAt DateTime @default(now())

  // Relations
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@unique([postId, version])
  @@map("post_revisions")
}

model Tag {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@map("tags")
}

model PostTag {
  id     String @id @default(uuid())
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[]     @relation("CategoryHierarchy")
  posts    PostCategory[]

  @@map("categories")
}

model PostCategory {
  id         String @id @default(uuid())
  postId     String
  categoryId String

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
  @@map("post_categories")
}

model Media {
  id           String   @id @default(uuid())
  key          String   @unique // R2 object key
  url          String // Full URL to access the file
  filename     String // Original filename
  mimeType     String
  size         Int // File size in bytes
  width        Int? // For images
  height       Int? // For images
  altText      String?
  caption      String?
  uploadedById String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploadedBy User? @relation(fields: [uploadedById], references: [id])

  @@index([mimeType])
  @@index([uploadedById])
  @@map("media")
}

model Comment {
  id         String        @id @default(uuid())
  postId     String
  content    String // Sanitized HTML
  status     CommentStatus @default(PENDING)
  authorId   String? // If registered user
  guestName  String? // For guest comments
  guestEmail String? // For guest comments
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  parentId   String? // For threaded comments

  // Relations
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User?     @relation(fields: [authorId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([postId, status])
  @@index([authorId])
  @@map("comments")
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model SiteSettings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  updatedAt   DateTime @updatedAt
  updatedById String?

  @@map("site_settings")
}

model AuditLog {
  id        String   @id @default(uuid())
  entity    String // "post", "user", "media", etc.
  entityId  String
  action    String // "create", "update", "delete", "publish", etc.
  details   Json? // Additional context
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Invitation {
  id          String           @id @default(uuid())
  email       String
  token       String           @unique
  roleIds     String[] // Array of role IDs
  status      InvitationStatus @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime         @default(now())
  usedAt      DateTime?
  invitedById String

  @@index([token])
  @@index([email])
  @@map("invitations")
}

// Enums
enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}
