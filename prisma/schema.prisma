generator client {
  provider        = "prisma-client"
  output          = "../shared/generated/prisma"
  previewFeatures = ["driverAdapters", "queryCompiler"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  passwordHash     String?
  avatarUrl        String?
  bio              String?
  isAdmin          Boolean  @default(false)
  isActive         Boolean  @default(true)
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  emailVerified    Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  authoredPosts   Post[]         @relation("AuthorPosts")
  coAuthoredPosts Post[]         @relation("CoAuthoredPosts")
  postRevisions   PostRevision[]
  comments        Comment[]

  @@map("users")
}

model Post {
  id            String         @id @default(uuid())
  slug          String         @unique
  title         String
  excerpt       String?
  content       Json // TipTap JSON content
  status        PostStatus     @default(DRAFT)
  visibility    PostVisibility @default(PUBLIC)
  featuredImage String?
  canonicalUrl  String?
  readingTime   Int? // in minutes
  viewCount     Int            @default(0)
  publishedAt   DateTime?
  scheduledAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // SEO fields
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?

  // Relations
  author     User           @relation("AuthorPosts", fields: [authorId], references: [id])
  authorId   String
  coAuthors  User[]         @relation("CoAuthoredPosts")
  tags       Tag[]
  categories Category[]
  revisions  PostRevision[]
  comments   Comment[]

  @@index([status, publishedAt])
  @@index([authorId])
  @@map("posts")
}

model PostRevision {
  id        String   @id @default(uuid())
  postId    String
  content   Json
  title     String
  excerpt   String?
  note      String?
  version   Int
  createdAt DateTime @default(now())

  // Relations
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@unique([postId, version])
  @@map("post_revisions")
}

model Tag {
  id          String   @id
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]

  @@map("tags")
}

model Category {
  id          String   @id
  name        String
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  posts    Post[]

  @@map("categories")
}

model Media {
  id        String   @id @default(uuid())
  key       String   @unique // R2 object key
  url       String // Full URL to access the file
  filename  String // Original filename
  mimeType  String
  size      Int // File size in bytes
  altText   String?
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mimeType])
  @@map("media")
}

model Comment {
  id         String        @id @default(uuid())
  postId     String
  content    String // Sanitized HTML
  status     CommentStatus @default(PENDING)
  authorId   String? // If registered user
  guestName  String? // For guest comments
  guestEmail String? // For guest comments
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  parentId   String? // For threaded comments

  // Relations
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User?     @relation(fields: [authorId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([postId, status])
  @@index([authorId])
  @@map("comments")
}

// Enums
enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}
